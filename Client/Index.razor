@using DNF.Projects.Services
@using DNF.Projects.Models
@using DNF.Projects.Shared

@namespace DNF.Projects
@inherits ModuleBase
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager

<div class="DNF-Projects-Index">
@if (_initialized && _Projects.Count > 0)
{
    <table class="table table-borderless header">
        <tr>
            <td>From: </td>
            <td><input id="from" class="form-control" @bind="@_from" /></td>
            <td>To: </td>
            <td><input id="to" class="form-control" @bind="@_to" /></td>
            <td>Metric: </td>
            <td>
                <select id="metric" class="form-control" @bind="@_metric">
                    <option value="Watchers">Watchers</option>
                    <option value="Stars">Stars</option>
                    <option value="Forks">Forks</option>
                    <option value="Contributors">Contributors</option>
                    <option value="Commits">Commits</option>
                    <option value="Issues">Issues</option>
                    <option value="PullRequests">Pull Requests</option>
                </select>
            </td>
            <td><button type="button" class="btn btn-primary" @onclick="Display">Display</button></td>
        </tr>
    </table>
    <br />
    <div id="chart" class="chart"></div>
    <br />
    <table class="table table-borderless search">
        <tr>
            <td>Find: </td>
            <td><input id="find" class="form-control" @bind="@_find" /></td>
            <td><button type="button" class="btn btn-primary" @onclick="Display">Search</button></td>
            <td><button type="button" class="btn btn-secondary" @onclick="Clear">Clear</button></td>
        </tr>
    </table>
    <br />
}

<ActionLink Action="Add" Security="SecurityAccessLevel.Edit" Text="Add Project" /><br />

@if (_initialized && _Projects.Count > 0)
{
    <Pager Items="@_Projects">
        <Header>
            <th style="width: 1px;">&nbsp;</th>
            <th style="width: 1px;">&nbsp;</th>
            <th style="width: 1px;">&nbsp;</th>
            <th>Name</th>
            <th>Watchers</th>
            <th>Stars</th>
            <th>Forks</th>
            <th>Contributors</th>
            <th>Commits</th>
            <th>Issues</th>
            <th>PRs</th>
        </Header>
        <Row>
            <td><ActionLink Action="View" EditMode="false" Parameters="@($"id=" + context.ProjectId.ToString() + "&from=" + _from + "&to=" + _to)" /></td>
            <td><ActionLink Action="Edit" Parameters="@($"id=" + context.ProjectId.ToString())" /></td>
            <td><ActionDialog Header="Delete Project" Message="@("Are You Sure You Wish To Delete This Project?")" Action="Delete" Security="SecurityAccessLevel.Edit" Class="btn btn-danger" OnClick="@(async () => await Delete(context))" /></td>
            <td>@((MarkupString)("<a href=\"" + context.Url + "\" target=\"_new\">" + context.Url.Replace(Common.UrlPrefix, "") + "</a>"))</td>
            <td>@(context.Watchers)</td>
            <td>@(context.Stars)</td>
            <td>@(context.Forks)</td>
            <td>@(context.Contributors)</td>
            <td>@(context.Commits)</td>
            <td>@(context.Issues)</td>
            <td>@(context.PullRequests)</td>
        </Row>
    </Pager>
    @_message
}
</div>

@code {
    bool _initialized = false;
    List<Project> _Projects;
    string _from = DateTime.Now.AddDays(-30).ToString("MMM-dd-yyyy");
    string _to = DateTime.Now.ToString("MMM-dd-yyyy");
    string _metric = "PullRequests";
    string _find = "";
    string _message = "";
    bool _refresh = false;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = "https://cdn.jsdelivr.net/npm/chart.js@2.8.0" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = ModulePath() + "Module.js" }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Display();
            _initialized = true;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project {Error}", ex.Message);
            AddModuleMessage("Error Loading Project", MessageType.Error);
        }
    }

    private async Task Display()
    {
        try
        {
            _Projects = await ProjectService.GetProjectsAsync(ModuleState.ModuleId);
            if (!string.IsNullOrEmpty(_find))
            {
                _Projects = _Projects.Where(item => item.Url.Contains(_find)).ToList();
            }
            if (_Projects != null && _Projects.Count != 0)
            {
                List<ProjectActivity> ProjectActivity = await ProjectService.GetProjectActivityAsync(-1, DateTime.Parse(_from), DateTime.Parse(_to), ModuleState.ModuleId);
                if (ProjectActivity != null)
                {
                    foreach (var project in _Projects)
                    {
                        project.Watchers = 0;
                        project.Stars = 0;
                        project.Forks = 0;
                        project.Contributors = 0;
                        project.Commits = 0;
                        project.Issues = 0;
                        project.PullRequests = 0;

                        var projectactivity = ProjectActivity.Where(item => item.ProjectId == project.ProjectId);
                        if (projectactivity.Any())
                        {
                            projectactivity = projectactivity.OrderBy(item => item.Date);
                            project.Watchers = projectactivity.Last().Watchers - projectactivity.First().Watchers;
                            project.Stars = projectactivity.Last().Stars - projectactivity.First().Stars;
                            project.Forks = projectactivity.Last().Forks - projectactivity.First().Forks;
                            project.Contributors = projectactivity.Last().Contributors - projectactivity.First().Contributors;
                            project.Commits = projectactivity.Last().Commits - projectactivity.First().Commits;
                            project.Issues = projectactivity.Last().Issues - projectactivity.First().Issues;
                            project.PullRequests = projectactivity.Last().PullRequests - projectactivity.First().PullRequests;
                        }
                    }
                    switch (_metric)
                    {
                        case "Watchers":
                            _Projects = _Projects.OrderByDescending(item => item.Watchers).ToList();
                            break;
                        case "Stars":
                            _Projects = _Projects.OrderByDescending(item => item.Stars).ToList();
                            break;
                        case "Forks":
                            _Projects = _Projects.OrderByDescending(item => item.Forks).ToList();
                            break;
                        case "Contributors":
                            _Projects = _Projects.OrderByDescending(item => item.Contributors).ToList();
                            break;
                        case "Commits":
                            _Projects = _Projects.OrderByDescending(item => item.Commits).ToList();
                            break;
                        case "Issues":
                            _Projects = _Projects.OrderByDescending(item => item.Issues).ToList();
                            break;
                        case "PullRequests":
                            _Projects = _Projects.OrderByDescending(item => item.PullRequests).ToList();
                            break;
                    }
                }
                _message = "";
                _refresh = true;
            }
            else
            {
                _message = "There Are No Matches For The Criteria Specified";
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project Activity {Error}", ex.Message);
            AddModuleMessage("Error Loading Project Activity", MessageType.Error);
        }
    }

    private async Task Clear()
    {
        _find = "";
        await Display();
    }

    private async Task Delete(Project Project)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(Project.ProjectId, ModuleState.ModuleId);
            await logger.LogInformation("Project Deleted {Project}", Project);
            _Projects = await ProjectService.GetProjectsAsync(ModuleState.SiteId);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Deleting Project {Project} {Error}", Project, ex.Message);
            AddModuleMessage("Error Deleting Project", MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            if (_refresh)
            {
                List<string> labels = new List<string>();
                List<int> values = new List<int>();
                List<object> datasets = new List<object>();
                string[] colors = new string[] { "#FF0000", "#FF8000", "#FFFF00", "#00FF00", "#00FFFF", "#0080FF", "#0000FF", "#8000FF", "#FF00FF", "#CCCCCC" };

                for (int i = 0; i < (_Projects.Count < 10 ? _Projects.Count : 10); i++)
                {
                    labels.Add(_Projects[i].Url.Replace(Common.UrlPrefix, ""));
                    switch (_metric)
                    {
                        case "Watchers":
                            values.Add(_Projects[i].Watchers);
                            break;
                        case "Stars":
                            values.Add(_Projects[i].Stars);
                            break;
                        case "Forks":
                            values.Add(_Projects[i].Forks);
                            break;
                        case "Contributors":
                            values.Add(_Projects[i].Contributors);
                            break;
                        case "Commits":
                            values.Add(_Projects[i].Commits);
                            break;
                        case "Issues":
                            values.Add(_Projects[i].Issues);
                            break;
                        case "PullRequests":
                            values.Add(_Projects[i].PullRequests);
                            break;
                    }
                }
                datasets.Add(new { label = _metric, data = values.ToArray(), fill = false, backgroundColor = colors });
                object options = new { maintainAspectRatio = false, legend = new { display = false }, scales = new { yAxes = new object[] { new { ticks = new { beginAtZero = true } } } } };

                var interop = new Interop(JSRuntime);
                await interop.CreateChart("chart", "bar", labels.ToArray(), datasets.ToArray(), options);

                _refresh = false;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Rendering Chart  {Error}", ex.Message);
            AddModuleMessage("Error Rendering Chart", MessageType.Error);
        }
    }
}