@using DNF.Projects.Services
@using DNF.Projects.Models
@using DNF.Projects.Shared

@namespace DNF.Projects
@inherits ModuleBase
@inject IProjectService ProjectService
@inject NavigationManager NavigationManager

<div class="DNF-Projects-View">
    @if (_initialized)
    {
        <h2 class="text-center">@_name</h2>
        <div class="row justify-content-center mb-3">
            <div class="col-sm-6">
                <div class="input-group">
                    <input type="date" class="form-control" @bind="@_from" />
                    <span class="input-group-text">To</span>
                    <input type="date" class="form-control" @bind="@_to" />
                    <button type="button" class="btn btn-primary" @onclick="Display">Display</button>
                </div>
            </div>
        </div>
        <br />
        <div id="chart" class="chart"></div>
        <br />
        <br />
        <Pager Items="@_ProjectActivity.OrderByDescending(item => item.Date)">
            <Header>
                <th>Date</th>
                <th>Watchers</th>
                <th>Stars</th>
                <th>Forks</th>
                <th>Contributors</th>
                <th>Commits</th>
                <th>Issues</th>
                <th>PRs</th>
            </Header>
            <Row>
                <td>@(context.Date.ToString("MMM-dd-yyyy"))</td>
                <td>@(context.Watchers)</td>
                <td>@(context.Stars)</td>
                <td>@(context.Forks)</td>
                <td>@(context.Contributors)</td>
                <td>@(context.Commits)</td>
                <td>@(context.Issues)</td>
                <td>@(context.PullRequests)</td>
            </Row>
        </Pager>
    }
</div>

@code {
    bool _initialized = false;
    List<ProjectActivity> _ProjectActivity;
    int _id;
    string _name;
    DateTime _from = DateTime.Now.AddDays(-30);
    DateTime _to = DateTime.Now;
    bool _refresh = false;

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = "https://cdn.jsdelivr.net/npm/chart.js@2.8.0" },
        new Resource { ResourceType = ResourceType.Script, Bundle = "ChartJS", Url = ModulePath() + "Module.js" }
    };

    public override string Title => "Daily Trends";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.QueryString.ContainsKey("from"))
            {
                _from = DateTime.Parse(PageState.QueryString["from"]);
            }
            if (PageState.QueryString.ContainsKey("to"))
            {
                _to = DateTime.Parse(PageState.QueryString["to"]);
            }

            _id = Int32.Parse(PageState.QueryString["id"]);
            var project = await ProjectService.GetProjectAsync(_id, ModuleState.ModuleId);
            if (project != null)
            {
                _name = project.Url.Replace(Common.UrlPrefix, "");
                await Display();
                _initialized = true;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project Activity {Error}", ex.Message);
            AddModuleMessage("Error Loading Project Activity", MessageType.Error);
        }
    }

    private async Task Display()
    {
        try
        {
            _ProjectActivity = await ProjectService.GetProjectActivityAsync(_id, _from.Date, _to.Date, ModuleState.ModuleId);
            if (_ProjectActivity.Count > 0)
            {
                _ProjectActivity = _ProjectActivity.OrderByDescending(item => item.Date).ToList();
                _refresh = true;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Project Activity {Error}", ex.Message);
            AddModuleMessage("Error Loading Project Activity", MessageType.Error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await base.OnAfterRenderAsync(firstRender);

            if (_refresh)
            {
                string[] metrics = new string[] { "Watchers", "Stars", "Forks", "Contributors", "Commits", "Issues", "PullRequests" };
                string[] colors = new string[] { "#FF0000", "#FF8000", "#FFFF00", "#00FF00", "#00FFFF", "#0080FF", "#0000FF" };

                // pivot data for chart
                List<string> labels = new List<string>();
                Dictionary<string, List<int>> data = new Dictionary<string, List<int>>();
                foreach (string metric in metrics)
                {
                    data.Add(metric, new List<int>());
                }
                foreach (var activity in _ProjectActivity.OrderBy(item => item.Date).ToList())
                {
                    labels.Add(activity.Date.ToShortDateString());
                    data["Watchers"].Add(activity.Watchers);
                    data["Stars"].Add(activity.Stars);
                    data["Forks"].Add(activity.Forks);
                    data["Contributors"].Add(activity.Contributors);
                    data["Commits"].Add(activity.Commits);
                    data["Issues"].Add(activity.Issues);
                    data["PullRequests"].Add(activity.PullRequests);
                }

                int index = -1;
                List<object> datasets = new List<object>();
                foreach (var item in data)
                {
                    index += 1;
                    datasets.Add(new { label = item.Key, data = item.Value.ToArray(), fill = false, borderColor = colors[index] });
                }
                object options = new {};

                var interop = new Interop(JSRuntime);
                await interop.CreateChart("chart", "line", labels.ToArray(), datasets.ToArray(), options);

                _refresh = false;
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Rendering Chart {Error}", ex.Message);
            AddModuleMessage("Error Rendering Chart", MessageType.Error);
        }

    }
}
